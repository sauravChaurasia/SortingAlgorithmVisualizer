{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/bubble-sort/bubble-sort.component.html","webpack:///src/app/bubble-sort/bubble-sort.component.ts","webpack:///src/app/insertion-sort/insertion-sort.component.html","webpack:///src/app/insertion-sort/insertion-sort.component.ts","webpack:///src/app/merge-sort/merge-sort.component.ts","webpack:///src/app/merge-sort/merge-sort.component.html","webpack:///src/app/selection-sort/selection-sort.component.html","webpack:///src/app/selection-sort/selection-sort.component.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","title","a","arrOfNum","i","push","randomIntFromInterval","sendData","sendData1","sendData2","min","max","Math","floor","random","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","BubbleSortComponent","simple","rawData","numarr","activeIndex2","activeIndex1","sorted","count","arrayToBeSorted","console","log","sort","setValue","data","length","j","temp","sortedArray","r","setTimeout","isSorted","iSorted","n1","n2","InsertionSortComponent","key","MergeSortComponent","SelectionSortComponent","min_ind","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport {Chart} from 'node_modules/chart.js';\nimport { __await } from 'tslib';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title=\"SortingAlgorithm\"\na=8\nsendData;\nsendData1;\nsendData2;\nngOnInit()\n{\n  const arrOfNum=[];\n    for(let i=0;i<77;i++)\n      {arrOfNum.push(this.randomIntFromInterval(5,500));\n      }\nthis.sendData=arrOfNum;\nthis.sendData1=arrOfNum;\n\nthis.sendData2=arrOfNum;\n\n\n}\nrandomIntFromInterval(min, max) { // Generating random Values\n  return Math.floor(Math.random() * (max - min + 1) + min);\n} \n}\n","<!-- {{\"asdsa\"}} -->\n\n<div class=\"row\">\n  <div class=\"col-md-4 offset-4\">\n<h3 style=\"text-align: center;\">Sorting Visualizer\n</h3> </div>\n\n</div>\n<div class=\"row center\">\n  \n    <table>\n      <tr>\n        <th>Selection Sort</th>\n        <th>Bubble Sort</th>\n        <th>Insertion Sort</th>\n      </tr>\n      <tr>\n        \n        <td>\n          <app-selection-sort [arrayToBeSorted]=\"sendData1\"></app-selection-sort>\n        </td>\n        <td>\n          <app-bubble-sort [arrayToBeSorted]=\"sendData\"></app-bubble-sort>\n        </td>\n        <td>\n          <app-insertion-sort [arrayToBeSorted]=\"sendData2\"></app-insertion-sort>\n        </td>\n      </tr>\n    <!-- </table>\n    </div>\n    <div class=\"col-md-4\">\n      <table> -->\n      <!-- <tr>\n        <th>Bubble Sort</th>\n      </tr>\n     \n      <tr>\n        <td>\n          <app-bubble-sort></app-bubble-sort>\n        </td>\n      </tr> -->\n    <!-- </table>\n    </div>\n    <div class=\"col-md-4\">\n     <table>--> \n       <!-- <tr> \n        <th>Insertion Sort</th>\n      </tr>\n      <tr>\n        <td>\n          <app-insertion-sort></app-insertion-sort>\n        </td>\n      </tr>\n    </table> -->\n    \n    \n  \n<!-- </div> -->\n<!-- <div class=\"row\">\n  <div class=\"col-md-10 offset-2\">\n    <table>\n      <tr>\n        <th>Selection Sort</th>\n      </tr>\n      <tr>\n        <td>\n          \n        </td>\n      </tr>\n    </table>\n  </div>\n</div> -->\n <!-- <div class=\"row\"> \n  <div class=\"col-md-10 offset-2\">\n    <table>\n      <tr>\n        <th>Insertion Sort</th>\n      </tr>\n      <tr>\n        <td>\n          <div *ngIf=\"!sorted\">\n            <div class=\"bar\" id=\"chan\" *ngFor=\"let siz of numarr;let comp of numarr; let i= index;let j=index\" style=\"width: 5px;\" [ngStyle]=\"{height:siz*.8+'px'}\"[ngClass]=\"{'red-bar' : i== activeIndex1,'green-bar':j==activeIndex2}\">\n            </div>\n            </div>\n            <div  *ngIf=\"sorted\" >\n              <div class=\"bar\" *ngFor=\"let siz of rawData\" style=\"width: 5px;\" [ngStyle]=\"{height:siz*.8+'px'}\">\n              </div>\n          </div>\n        </td>\n      </tr>\n    </table>\n  </div>\n</div> -->","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BubbleSortComponent } from './bubble-sort/bubble-sort.component';\nimport { SelectionSortComponent } from './selection-sort/selection-sort.component';\nimport { InsertionSortComponent } from './insertion-sort/insertion-sort.component';\nimport { MergeSortComponent } from './merge-sort/merge-sort.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    BubbleSortComponent,\n    SelectionSortComponent,\n    InsertionSortComponent,\n    MergeSortComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","\n\n  <!-- <div id=\"chart\">\n    <canvas id=\"myChart\"></canvas>\n  </div> -->\n<!-- <div class=\"contain\" *ngFor='let arr of arr' style>\n  <div class=\"bar\" [ngStyle]=\"{'height': \">\n    {{arr}}\n  </div>\n</div> -->\n<!-- <div class>\n  {{rawData}}\n</div> -->\n<!-- <div>\n  <h3 style=\"text-align: center;\">Bubble Sort Visualizer\n  </h3> \n</div> -->\n<!-- <hr>\n<div *ngFor=\"let siz of rawData;let comp of numarr; let i = index;let j=index\" style=\"display: inline\" [ngClass]=\"{'red-font' : i == activeIndex1,'green-bar':j==activeIndex2}\"> {{siz}}\n</div>\n<hr> -->\n<!-- <div class=\"row\">\n  <div class=\"col-md-10 offset-2\"> -->\n    <!-- <table>\n      <tr>\n        <th>Bubble Sort</th> -->\n        <!-- <th>Merge Sort</th>\n        <th>Quick Sort</th> -->\n      <!-- </tr>\n      <tr>\n        <td> -->\n          <div *ngIf=\"!sorted\">\n            <div class=\"bar\" id=\"chan\" *ngFor=\"let siz of numarr;let comp of numarr; let i= index;let j=index\" style=\"width: 5px;\" [ngStyle]=\"{height:siz*.8+'px'}\"[ngClass]=\"{'red-bar' : i== activeIndex1,'green-bar':j==activeIndex2}\">\n            </div>\n            <!-- <select name=\"speed\" id=\"speed\" >\n              <option value=\"50\" active>50ms</option>\n              <option value=\"100\" active>100ms</option>\n              <option value=\"200\" active>200ms</option>\n            </select> -->\n            </div>\n            <div  *ngIf=\"sorted\" >\n              <div class=\"bar\" *ngFor=\"let siz of rawData\" style=\"width: 5px;\" [ngStyle]=\"{height:siz*.8+'px'}\">\n              </div>\n          </div>\n          <div class=\"row\" align=\"bottom\">\n            <div class=\"col-md-8 offset-md-2\">\n          <table class=\"text-align-center\" align=\"center\">\n            <tr >\n              <th colspan=\"3\">\n                Time Complexity\n              </th>\n             \n            </tr>\n            <tr>\n              <th>\n                Best Case\n              </th>\n              <th>\n                Average Case\n              </th>\n              <th>\n                Worst Case\n              </th>\n            </tr>\n            <tr>\n              <td>\n                Ω(n)\n              </td>\n              <td>\n                θ(n^2)\n              </td>\n              <td>\n                O(n^2)\n              </td>\n            </tr>\n          </table></div>\n          </div>\n        <!-- </td> -->\n        <!-- <td>\n          <div *ngIf=\"!sorted\">\n            <div class=\"bar\" id=\"chan\" *ngFor=\"let siz of numarr;let comp of numarr; let i= index;let j=index\" [ngStyle]=\"{height:siz*.8+'px'}\"[ngClass]=\"{'red-bar' : i== activeIndex1,'green-bar':j==activeIndex2}\">\n            </div>\n            </div>\n            <div  *ngIf=\"sorted\" >\n              <div class=\"bar\" *ngFor=\"let siz of rawData\" [ngStyle]=\"{height:siz*.8+'px'}\">\n              </div>\n          </div>\n        </td> -->\n        <!-- <td>\n          <div *ngIf=\"!sorted\">\n            <div class=\"bar\" id=\"chan\" *ngFor=\"let siz of numarr;let comp of numarr; let i= index;let j=index\" [ngStyle]=\"{height:siz*.8+'px'}\"[ngClass]=\"{'red-bar' : i== activeIndex1,'green-bar':j==activeIndex2}\">\n            </div>\n            </div>\n            <div  *ngIf=\"sorted\" >\n              <div class=\"bar\" *ngFor=\"let siz of rawData\" [ngStyle]=\"{height:siz*.8+'px'}\">\n              </div>\n          </div>\n        </td> -->\n      <!-- </tr>\n    </table>\n  </div>\n</div> -->\n\n\n  \n\n  \n\n","import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-bubble-sort',\n  templateUrl: './bubble-sort.component.html',\n  styleUrls: ['./bubble-sort.component.css']\n})\nexport class BubbleSortComponent implements OnInit {\n  @Input()\n  arrayToBeSorted;//=[373,265,100,313,378,153,302,409,470,302,496,89,499,465,313,251,374,223,472,227,136,480,367,88,205,379,423,486,425,240,480,252,17,316,315,39,474,212,33,313,64,451,79,356,418,90,46,381,173,386,500,279,416,223,82,497,389,479,259,244,290,109,273,174,99,269,100,383,280,347,95,186,371,463,198,492,232];\n  simple:any=[];\n  title = 'SortingAlgorithm';\n  sortedArray:number[];\n  rawData:number[]=[];\n  numarr:any=[];\n  activeIndex2=0;\n  activeIndex1 = 0;\n  iSorted:any;  //stores the sorted array after inbuilt sort() method\n  sorted=false;  // stores the status whether the array is sorted or not \n  count=0;//counter while checking for equallity\n  \n \n   ngOnInit()\n   {  this.simple=this.arrayToBeSorted;\n        console.log(\"Array :\"+ this.simple);\n              this.sort(this.setValue());\n   }  \n  setValue()\n  {\n    const arrOfNum=[];\n    for(let i=0;i<77;i++)\n      {arrOfNum.push(this.randomIntFromInterval(5,500));\n      }\n    return arrOfNum;\n  }\n  randomIntFromInterval(min, max) { // Generating random Values\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }  \n  async sort(data){    //Sorting Algorithm\n                this.numarr=data;\n                for(let i=0;i<this.numarr.length;i++)\n                {\n                  for(let j=0;j<this.numarr.length-i-1;j++)\n                  {\n                    if(this.numarr[j]>this.numarr[j+1])\n                    {\n                      // this.compareLeft = j;\n                      this.activeIndex1 = j+2 ;   //this is compared to others\n                      this.activeIndex2=j+1;\n                      \n                      let temp;\n                      temp=this.numarr[j];\n                      this.numarr[j]=this.numarr[j+1];\n                      this.numarr[j+1]=temp;\n                      this.sortedArray=this.numarr;\n                      this.rawData=this.numarr;\n                      // console.log(this.sortedArray);\n                      \n                    }   await new Promise(r=>setTimeout(r,25));     \n                  } \n\n                }\n                this.isSorted(data);\n                \n                return this.sortedArray;\n              }\n              isSorted(data)\n              { this.iSorted=data.sort((n1,n2) => n1 - n2);\n                if(this.iSorted.length==this.sortedArray.length)\n                { for(let i=0;i<this.sortedArray.length;i++)\n                    {\n                      if(this.iSorted[i]==this.sortedArray[i])\n                            {this.count++;}\n                    }\n                  if(this.count==this.sortedArray.length)\n                    {\n                      this.sorted=true;\n                    }\n                }\n                // console.log(this.sorted)\n                // console.log(this.iSorted);\n\n              }\n}\n","<div *ngIf=\"!sorted\">\n    <div class=\"bar\" id=\"chan\" *ngFor=\"let siz of numarr;let comp of numarr; let i= index;let j=index\" style=\"width: 5px;\" [ngStyle]=\"{height:siz*.8+'px'}\"[ngClass]=\"{'red-bar' : i== activeIndex1,'green-bar':j==activeIndex2}\">\n    </div>\n    </div>\n    <div  *ngIf=\"sorted\" >\n      <div class=\"bar\" *ngFor=\"let siz of rawData\" style=\"width: 5px;\" [ngStyle]=\"{height:siz*.8+'px'}\">\n      </div>\n  </div>\n  <div class=\"row\" align=\"bottom\">\n    <div class=\"col-md-8 offset-md-2\">\n  <table class=\"text-align-center\" align=\"center\">\n    <tr >\n      <th colspan=\"3\">\n        Time Complexity\n      </th>\n     \n    </tr>\n    <tr>\n      <th>\n        Best Case\n      </th>\n      <th>\n        Average Case\n      </th>\n      <th>\n        Worst Case\n      </th>\n    </tr>\n    <tr>\n      <td>\n        Ω(n)\n      </td>\n      <td>\n        θ(n^2)\n      </td>\n      <td>\n        θ(n^2)\n      </td>\n    </tr>\n  </table></div></div>","import { Component, Input, OnInit } from '@angular/core';\n\n\n@Component({\n  selector: 'app-insertion-sort',\n  templateUrl: './insertion-sort.component.html',\n  styleUrls: ['./insertion-sort.component.css']\n})\nexport class InsertionSortComponent implements OnInit {\n  @Input()\n  arrayToBeSorted//=[373,265,100,313,378,153,302,409,470,302,496,89,499,465,313,251,374,223,472,227,136,480,367,88,205,379,423,486,425,240,480,252,17,316,315,39,474,212,33,313,64,451,79,356,418,90,46,381,173,386,500,279,416,223,82,497,389,479,259,244,290,109,273,174,99,269,100,383,280,347,95,186,371,463,198,492,232];\n  simple\n  title = 'SortingAlgorithm';\n  sortedArray:number[];\n  rawData:number[]=[];\n  numarr:any=[];\n  activeIndex2=0;\n  activeIndex1 = 0;\n  iSorted:any;  //stores the sorted array after inbuilt sort() method\n  sorted=false;  // stores the status whether the array is sorted or not \n  count=0;//counter while checking for equallity\n\n   ngOnInit()\n   { this.simple=this.arrayToBeSorted; \n       console.log(\"Array :\"+ this.simple);\n              this.sort(this.setValue());\n   }  \n  setValue()\n  {\n    const arrOfNum=[];\n    for(let i=0;i<77;i++)\n      {arrOfNum.push(this.randomIntFromInterval(5,500));\n      }\n    return arrOfNum;\n  }\n  randomIntFromInterval(min, max) { // Generating random Values\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }  \n  async sort(data){    //Sorting Algorithm\n                this.numarr=data;\n                for(let i=1;i<this.numarr.length;i++)\n                {\n                  let key=this.numarr[i];\n                  let j=i-1;\n                 \n                  while(j>=0 && this.numarr[j]>key)\n                  {\n                    this.activeIndex1 = key ;   //this is compared to others\n                    this.activeIndex2=j;\n                    this.numarr[j+1]=this.numarr[j];\n                    j--;\n                  }await new Promise(r=>setTimeout(r,25));\n                  this.numarr[j+1]=key;\n                  // this.sortedArray=this.numarr;\n                }\n                 \n                 this.sortedArray=this.numarr;\n                this.isSorted(data);\n                this.rawData=this.sortedArray;\n                console.log(\"Insertion Size: \"+this.sortedArray);\n                return this.sortedArray;\n              }\n              isSorted(data)\n              { this.iSorted=data.sort((n1,n2) => n1 - n2);\n                if(this.iSorted.length==this.sortedArray.length)\n                { for(let i=0;i<this.sortedArray.length;i++)\n                    {\n                      if(this.iSorted[i]==this.sortedArray[i])\n                            {this.count++;}\n                    }\n                  if(this.count==this.sortedArray.length)\n                    {\n                      this.sorted=true;\n                    }\n                }\n                console.log(\"Inserion\"+this.sorted);\n                console.log(this.iSorted);\n\n              }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-merge-sort',\n  templateUrl: './merge-sort.component.html',\n  styleUrls: ['./merge-sort.component.css']\n})\nexport class MergeSortComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>merger-sort works!</p>\n","\n<div *ngIf=\"!sorted\">\n  <div class=\"bar\" id=\"chan\" *ngFor=\"let siz of numarr;let comp of numarr; let i= index;let j=index\" style=\"width: 5px;\" [ngStyle]=\"{height:siz*.8+'px'}\"[ngClass]=\"{'red-bar' : i== activeIndex1,'green-bar':j==activeIndex2}\">\n  </div>\n</div>\n<div  *ngIf=\"sorted\" >\n  <div class=\"bar\" *ngFor=\"let siz of rawData\" style=\"width: 5px;\" [ngStyle]=\"{height:siz*.8+'px'}\">\n  </div>\n</div>\n<div class=\"row\" align=\"bottom\">\n  <div class=\"col-md-8 offset-md-2\">\n    <table class=\"text-align-center\" align=\"center\">\n      <tr >\n        <th colspan=\"3\">\n          Time Complexity\n        </th>\n       \n      </tr>\n      <tr>\n        <th>\n          Best Case\n        </th>\n        <th>\n          Average Case\n        </th>\n        <th>\n          Worst Case\n        </th>\n      </tr>\n      <tr>\n        <td>\n          Ω(n^2)\n        </td>\n        <td>\n          θ(n^2)\n        </td>\n        <td>\n          O(n^2)\n        </td>\n      </tr>\n    </table>\n  </div>\n\n</div>\n\n\n            \n    \n    ","import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-selection-sort',\n  templateUrl: './selection-sort.component.html',\n  styleUrls: ['./selection-sort.component.css']\n})\nexport class SelectionSortComponent implements OnInit {\n @Input()\n  arrayToBeSorted//=[373,265,100,313,378,153,302,409,470,302,496,89,499,465,313,251,374,223,472,227,136,480,367,88,205,379,423,486,425,240,480,252,17,316,315,39,474,212,33,313,64,451,79,356,418,90,46,381,173,386,500,279,416,223,82,497,389,479,259,244,290,109,273,174,99,269,100,383,280,347,95,186,371,463,198,492,232];\n  simple;\n  sortedArray:number[];\n  rawData:number[]=[];\n  numarr:any=[];\n  activeIndex2=0;\n  activeIndex1 = 0;\n  min_ind;  \n  iSorted:any;  //stores the sorted array after inbuilt sort() method\n  sorted=false;  // stores the status whether the array is sorted or not \n  count=0;//counter while checking for equallity\n\n   ngOnInit()\n   { this.simple=this.arrayToBeSorted; \n       console.log(\"Array :\"+ this.simple);\n              this.sort(this.setValue());\n   }  \n  setValue()\n  {\n    const arrOfNum=[];\n    for(let i=0;i<77;i++)\n      {arrOfNum.push(this.randomIntFromInterval(5,500));\n      }\n    return arrOfNum;\n  }\n  randomIntFromInterval(min, max) { // Generating random Values\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }  \n  async sort(data){    //Sorting Algorithm\n                this.numarr=data;\n                for(let i=0;i<this.numarr.length;i++)\n                {\n                  this.min_ind=i;\n                  for(let j=i+1;j<this.numarr.length;j++)\n                  {\n                    if(this.numarr[j]<this.numarr[this.min_ind])\n                    {\n                      // this.compareLeft = j;\n                      this.activeIndex1 = i ;   //this is compared to others\n                      this.activeIndex2=j;\n                      this.min_ind=j;\n                    } await new Promise(r=>setTimeout(r,25));\n                     \n                      // console.log(\"Selection: \"+this.sortedArray);\n                      \n                          \n                  }\n                   let temp;\n                      temp=this.numarr[i];\n                      this.numarr[i]=this.numarr[this.min_ind];\n                      this.numarr[this.min_ind]=temp;\n                      this.sortedArray=this.numarr;\n                      this.rawData=this.numarr; \n                      \n\n                }\n                console.log(\"Selection3: \"+this.sortedArray);\n                this.isSorted(data);\n                \n                return this.sortedArray;\n              }\n              isSorted(data)\n              { this.iSorted=data.sort((n1,n2) => n1 - n2);\n                console.log(\"Selection check 4:\"+this.iSorted);\n                if(this.iSorted.length==this.sortedArray.length)\n                { for(let i=0;i<this.sortedArray.length;i++)\n                    {\n                      if(this.iSorted[i]==this.sortedArray[i])\n                            {this.count++;}\n                    }\n                  if(this.count==this.sortedArray.length)\n                    {\n                      this.sorted=true;\n                    }\n                }\n                console.log(\"Selection check1: \"+this.sorted)\n                console.log(\"Selection check 2:\"+this.iSorted);\n\n              }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}